%% File name: Analysis.m
%  Author: Ashutosh Modi
%  Description: Used to analysis of data extracted from csv file.
%               Data.csv and Slots.csv files are generated by C++ code.
%
%  Date: Nov 29, 2017.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

clc; clear all;
%% Read user data
formatSpecUserData = '%f%f%f%f%C';
usersData = readtable('Data.csv','Delimiter',',', ...
    'Format',formatSpecUserData);

%% Read slot data
formatSpecSlots = '%{HH:mm:ss}D%{HH:mm:ss}D';
slotData = readtable('Slots.csv','Delimiter',',', ...
    'Format',formatSpecSlots);

[uRow, uCol] = size(usersData);
[sRow, sCol] = size(slotData);

userNames = unique(usersData(:,5));
[uniqueUserCount, ~] = size(userNames);

%% Get usrs data separated in tables

concatenatedData = zeros(0);

for i=1:uniqueUserCount
    % get user name
    user = char(userNames{i,1});
    %Get indices of those user
    indices = strmatch(user,char(usersData{:,5}));
    %Get 4 columns of that data
    data = usersData(indices,:);
    %convert data to double
    %dataArray = table2array(data(:,1:4));
    doctets = table2array(data(:,1));
    duration = table2array(data(:,2));
    doctetsPerDuration = doctets./duration;
    doctetsPerDuration(isnan(doctetsPerDuration)) = 0;
    %Find if there is any missing slot if yes then insert as 0
    
    concatenatedData = [concatenatedData doctetsPerDuration];
end

i=1;j=sRow;
monData = concatenatedData(i:j,:);
i=i+sRow;j=j+sRow;
tueData = concatenatedData(i:j,:);
i=i+sRow;j=j+sRow;
wedData = concatenatedData(i:j,:);
i=i+sRow;j=j+sRow;
thuData = concatenatedData(i:j,:);
i=i+sRow;j=j+sRow;
friData = concatenatedData(i:j,:);

%Monday with rest days
[RHO_M_T,PVAL_M_T] = corr(monData,tueData,'Type','Spearman');
[RHO_M_W,PVAL_M_W] = corr(monData,wedData,'Type','Spearman');
[RHO_M_Th,PVAL_M_Th] = corr(monData,thuData,'Type','Spearman');
[RHO_M_F,PVAL_M_F] = corr(monData,friData,'Type','Spearman');

[RHO_T_W,PVAL_T_W] = corr(tueData,wedData,'Type','Spearman');
[RHO_T_Th,PVAL_T_Th] = corr(tueData,thuData,'Type','Spearman');
[RHO_T_F,PVAL_T_F] = corr(tueData,friData,'Type','Spearman');

[RHO_W_Th,PVAL_W_Th] = corr(wedData,thuData,'Type','Spearman');
[RHO_W_F,PVAL_W_F] = corr(wedData,friData,'Type','Spearman');

[RHO_Th_F,PVAL_Th_F] = corr(thuData,friData,'Type','Spearman');


%% Results
PVAL_M_T(PVAL_M_T > 0.05) = 0;
PVAL_M_W(PVAL_M_W > 0.05) = 0;
PVAL_M_Th(PVAL_M_Th > 0.05) = 0;
PVAL_M_F(PVAL_M_F > 0.05) = 0;
PVAL_T_W(PVAL_T_W > 0.05) = 0;
PVAL_T_Th(PVAL_T_Th > 0.05) = 0;
PVAL_T_F(PVAL_T_F > 0.05) = 0;
PVAL_W_Th(PVAL_W_Th > 0.05) = 0;
PVAL_Th_F(PVAL_Th_F > 0.05) = 0;

totalComb = (uniqueUserCount*(uniqueUserCount-1)/2);
M_T_Match = totalComb - (nnz(triu(PVAL_M_T)) + sum(sum(isnan(triu(PVAL_M_T)))));
M_W_Match = totalComb - (nnz(triu(PVAL_M_W)) + sum(sum(isnan(triu(PVAL_M_W)))));
M_Th_Match = totalComb - (nnz(triu(PVAL_M_Th)) + sum(sum(isnan(triu(PVAL_M_Th)))));
M_F_Match = totalComb - (nnz(triu(PVAL_M_F)) + sum(sum(isnan(triu(PVAL_M_F)))));
T_W_Match = totalComb - (nnz(triu(PVAL_T_W)) + sum(sum(isnan(triu(PVAL_T_W)))));
T_Th_Match = totalComb - (nnz(triu(PVAL_T_Th)) + sum(sum(isnan(triu(PVAL_T_Th)))));
T_F_Match = totalComb - (nnz(triu(PVAL_T_F)) + sum(sum(isnan(triu(PVAL_T_F)))));
W_Th_Match = totalComb - (nnz(triu(PVAL_W_Th)) + sum(sum(isnan(triu(PVAL_W_Th)))));
Th_F_Match = totalComb - (nnz(triu(PVAL_Th_F)) + sum(sum(isnan(triu(PVAL_Th_F)))));

Matches = [M_T_Match M_W_Match M_Th_Match M_F_Match T_W_Match T_Th_Match T_F_Match W_Th_Match Th_F_Match]';

